// $Id$
/**
 * @file CaloIdentifier/HGTD_ID.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Aug, 2012
 * @brief Inline implementations for HGTD_ID.
 */


//--------------------
// Inline definitions
//--------------------

inline Identifier 
HGTD_ID::region_id   ( const ExpandedIdentifier& exp_id) const
{  
  return this->region_id   ( exp_id[m_BEC_INDEX],
                             exp_id[m_SAMPLING_INDEX], 
                             exp_id[m_GRANULARITY_INDEX] );
}

inline Identifier 
HGTD_ID::region_id (int barrel_ec, int sampling, int granularity) const 
{

    // Do checks
 //   if(m_do_checks) {
//      region_id_checks ( barrel_ec, sampling, region );
//    }

    Identifier result(0);

    // Pack fields independently
    m_lar_impl.pack      (lar_field_value(),    result);
//    m_hgtd_impl.pack       (lar_hgtd_field_value(), result);
//    m_hgtd_impl.pack       (-2, result);
    m_hgtd_impl.pack       (7, result);
    m_bec_impl.pack      (barrel_ec,            result);
    m_sampling_impl.pack (sampling,             result);
    m_granularity_impl.pack   (granularity,               result);

    return result;
}

//----------------------------------------------------------------------------
inline Identifier 
HGTD_ID::channel_id   ( const ExpandedIdentifier& exp_id) const
{  
  return this->channel_id (exp_id[m_BEC_INDEX],
                           exp_id[m_SAMPLING_INDEX], 
                           exp_id[m_GRANULARITY_INDEX],
                           exp_id[m_X_INDEX_INDEX],
                           exp_id[m_Y_INDEX_INDEX]);
}

//----------------------------------------------------------------------------
inline Identifier 
HGTD_ID::channel_id   ( int barrel_ec, int sampling, int granularity, int x, int y )  const
{  
    // Do checks
    if(m_do_checks) {
      channel_id_checks( barrel_ec, sampling, granularity, x, y );
    }

    Identifier result(0);
    // Pack fields independently
    m_lar_impl.pack      (lar_field_value(),    result);
//    m_hgtd_impl.pack     (lar_hgtd_field_value(), result);
//    m_hgtd_impl.pack     (-2, result);
    m_hgtd_impl.pack     (7, result);
    m_bec_impl.pack      (barrel_ec,            result);
    m_sampling_impl.pack (sampling,             result);
    m_granularity_impl.pack   (granularity,               result);
    m_x_index_impl.pack      (x,                  result);
    m_y_index_impl.pack      (y,                  result);

    return result;
}

//----------------------------------------------------------------------------
inline HGTD_ID::id_iterator HGTD_ID::hgtd_begin    (void) const
{
  return channels().begin();
}

//----------------------------------------------------------------------------
inline HGTD_ID::id_iterator HGTD_ID::hgtd_end      (void) const
{
  return channels().end();
}

//----------------------------------------------------------------------------
inline bool HGTD_ID::is_hgtd(const Identifier id) const
{
    return (is_connected(id));
}

//----------------------------------------------------------------------------
inline int HGTD_ID::barrel_ec(const Identifier id)const
{
  return (m_bec_impl.unpack(id));
}

//----------------------------------------------------------------------------
inline int HGTD_ID::sampling(const Identifier id)const
{
  return (m_sampling_impl.unpack(id));
}

inline int HGTD_ID::granularity(const Identifier id)const
{
  return (m_granularity_impl.unpack(id));
}

//----------------------------------------------------------------------------
inline int HGTD_ID::x_index(const Identifier id)const
{
  int result = -9999 ;
  if(is_connected(id)) result = m_x_index_impl.unpack(id);
  return(result);
}

//----------------------------------------------------------------------------
inline int HGTD_ID::y_index(const Identifier id)const
{
  int result = -9999 ;
  if(is_connected(id)) result = m_y_index_impl.unpack(id);
  return(result);
}

//----------------------------------------------------------------------------
inline bool HGTD_ID::is_connected(const Identifier channelId) const
{
//  return ( m_hgtd_impl.unpack(channelId) == -2 );
  return ( m_hgtd_impl.unpack(channelId) == 7 );
}

